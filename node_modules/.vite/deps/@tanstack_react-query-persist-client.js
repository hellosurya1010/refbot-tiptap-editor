import {
  IsRestoringProvider,
  QueryClientProvider,
  dehydrate,
  hydrate,
  matchQuery
} from "./chunk-NKTXT3RC.js";
import {
  require_react
} from "./chunk-ZVH3J77E.js";
import {
  __toESM
} from "./chunk-J32WSRGE.js";

// node_modules/@tanstack/query-persist-client-core/build/modern/persist.js
var cacheableEventTypes = [
  "added",
  "removed",
  "updated"
];
function isCacheableEventType(eventType) {
  return cacheableEventTypes.includes(eventType);
}
async function persistQueryClientRestore({
  queryClient,
  persister,
  maxAge = 1e3 * 60 * 60 * 24,
  buster = "",
  hydrateOptions
}) {
  try {
    const persistedClient = await persister.restoreClient();
    if (persistedClient) {
      if (persistedClient.timestamp) {
        const expired = Date.now() - persistedClient.timestamp > maxAge;
        const busted = persistedClient.buster !== buster;
        if (expired || busted) {
          persister.removeClient();
        } else {
          hydrate(queryClient, persistedClient.clientState, hydrateOptions);
        }
      } else {
        persister.removeClient();
      }
    }
  } catch (err) {
    if (true) {
      console.error(err);
      console.warn(
        "Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded."
      );
    }
    persister.removeClient();
  }
}
async function persistQueryClientSave({
  queryClient,
  persister,
  buster = "",
  dehydrateOptions
}) {
  const persistClient = {
    buster,
    timestamp: Date.now(),
    clientState: dehydrate(queryClient, dehydrateOptions)
  };
  await persister.persistClient(persistClient);
}
function persistQueryClientSubscribe(props) {
  const unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe((event) => {
    if (isCacheableEventType(event.type)) {
      persistQueryClientSave(props);
    }
  });
  const unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe((event) => {
    if (isCacheableEventType(event.type)) {
      persistQueryClientSave(props);
    }
  });
  return () => {
    unsubscribeQueryCache();
    unusbscribeMutationCache();
  };
}
function persistQueryClient(props) {
  let hasUnsubscribed = false;
  let persistQueryClientUnsubscribe;
  const unsubscribe = () => {
    hasUnsubscribed = true;
    persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();
  };
  const restorePromise = persistQueryClientRestore(props).then(() => {
    if (!hasUnsubscribed) {
      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);
    }
  });
  return [unsubscribe, restorePromise];
}

// node_modules/@tanstack/query-persist-client-core/build/modern/retryStrategies.js
var removeOldestQuery = ({ persistedClient }) => {
  const mutations = [...persistedClient.clientState.mutations];
  const queries = [...persistedClient.clientState.queries];
  const client = {
    ...persistedClient,
    clientState: { mutations, queries }
  };
  const sortedQueries = [...queries].sort(
    (a, b) => a.state.dataUpdatedAt - b.state.dataUpdatedAt
  );
  if (sortedQueries.length > 0) {
    const oldestData = sortedQueries.shift();
    client.clientState.queries = queries.filter((q) => q !== oldestData);
    return client;
  }
  return void 0;
};

// node_modules/@tanstack/query-persist-client-core/build/modern/createPersister.js
var PERSISTER_KEY_PREFIX = "tanstack-query";
function experimental_createPersister({
  storage,
  buster = "",
  maxAge = 1e3 * 60 * 60 * 24,
  serialize = JSON.stringify,
  deserialize = JSON.parse,
  prefix = PERSISTER_KEY_PREFIX,
  filters
}) {
  return async function persisterFn(queryFn, context, query) {
    const storageKey = `${prefix}-${query.queryHash}`;
    const matchesFilter = filters ? matchQuery(filters, query) : true;
    if (matchesFilter && query.state.data === void 0 && storage != null) {
      try {
        const storedData = await storage.getItem(storageKey);
        if (storedData) {
          const persistedQuery = await deserialize(storedData);
          if (persistedQuery.state.dataUpdatedAt) {
            const queryAge = Date.now() - persistedQuery.state.dataUpdatedAt;
            const expired = queryAge > maxAge;
            const busted = persistedQuery.buster !== buster;
            if (expired || busted) {
              await storage.removeItem(storageKey);
            } else {
              setTimeout(() => {
                query.setState({
                  dataUpdatedAt: persistedQuery.state.dataUpdatedAt,
                  errorUpdatedAt: persistedQuery.state.errorUpdatedAt
                });
                if (query.isStale()) {
                  query.fetch();
                }
              }, 0);
              return Promise.resolve(persistedQuery.state.data);
            }
          } else {
            await storage.removeItem(storageKey);
          }
        }
      } catch (err) {
        if (true) {
          console.error(err);
          console.warn(
            "Encountered an error attempting to restore query cache from persisted location."
          );
        }
        await storage.removeItem(storageKey);
      }
    }
    const queryFnResult = await queryFn(context);
    if (matchesFilter && storage != null) {
      setTimeout(async () => {
        storage.setItem(
          storageKey,
          await serialize({
            state: query.state,
            queryKey: query.queryKey,
            queryHash: query.queryHash,
            buster
          })
        );
      }, 0);
    }
    return Promise.resolve(queryFnResult);
  };
}

// node_modules/@tanstack/react-query-persist-client/build/modern/PersistQueryClientProvider.js
var React = __toESM(require_react(), 1);
var PersistQueryClientProvider = ({
  client,
  children,
  persistOptions,
  onSuccess,
  ...props
}) => {
  const [isRestoring, setIsRestoring] = React.useState(true);
  const refs = React.useRef({ persistOptions, onSuccess });
  const didRestore = React.useRef(false);
  React.useEffect(() => {
    refs.current = { persistOptions, onSuccess };
  });
  React.useEffect(() => {
    const options = {
      ...refs.current.persistOptions,
      queryClient: client
    };
    if (!didRestore.current) {
      didRestore.current = true;
      setIsRestoring(true);
      persistQueryClientRestore(options).then(async () => {
        var _a, _b;
        try {
          await ((_b = (_a = refs.current).onSuccess) == null ? void 0 : _b.call(_a));
        } finally {
          setIsRestoring(false);
        }
      });
    }
    return isRestoring ? void 0 : persistQueryClientSubscribe(options);
  }, [client, isRestoring]);
  return React.createElement(QueryClientProvider, { client, ...props }, React.createElement(IsRestoringProvider, { value: isRestoring }, children));
};
export {
  PERSISTER_KEY_PREFIX,
  PersistQueryClientProvider,
  experimental_createPersister,
  persistQueryClient,
  persistQueryClientRestore,
  persistQueryClientSave,
  persistQueryClientSubscribe,
  removeOldestQuery
};
//# sourceMappingURL=@tanstack_react-query-persist-client.js.map
